[
  {
    "id": "da7e3de6-7490-4eab-9d24-8784a43e3b5c",
    "title": "Solved 4 problems today",
    "date": "2024-01-09",
    "blocks": [
      {
        "component": "paragraph",
        "text": "Wanted do more as punishment but currently I am too slow."
      },
      {
        "component": "bulleted_list_item",
        "text": "P283, easy, couldn’t solve had to watch the soln."
      },
      {
        "component": "bulleted_list_item",
        "text": "P238, medium, again couldn’t solve, had to see the solution while i did the code myself i was still stuck as i was not counting for the time complexity of the inbuilt function of insert in cpp."
      },
      {
        "component": "bulleted_list_item",
        "text": "P334,medium,solution"
      },
      {
        "component": "bulleted_list_item",
        "text": "P443,string compression, Medium. Wasted a lot of time as i could not figure out how what was happening at the boundary of chars vector."
      }
    ]
  },
  {
    "id": "9fad17da-8758-482e-b0d2-88745541b661",
    "title": "Started Socket Programming in C++",
    "date": "2024-01-07",
    "blocks": [
      {
        "component": "paragraph",
        "text": "Sockets are like pointers but for traversing networks. When you start a socket you are returned an integer that you can use to start communication between a server and client. "
      },
      {
        "component": "paragraph",
        "text": "There are two types of sockets"
      },
      {
        "component": "bulleted_list_item",
        "text": "Socket stream - meant for reliable connections and data integrity. Protocols used are TCP/IP (Transmission control protocol)"
      },
      {
        "component": "bulleted_list_item",
        "text": "Datagram socket - meant for speedy and unreliable connections, used in cases where some data loss is acceptable. Protocol used is UDP(user datagram protocol)."
      },
      {
        "component": "paragraph",
        "text": "Tried writing some code as well to start a basic server but could not figure out how to include winsock_32 something dll in vs code ig vs studio is required."
      },
      {
        "component": "paragraph",
        "text": "did not do much of the grind today, solved the problem151 I had left yesterday. It was about reversing the words in a string. Used two pointer method, had to watch the solutions though."
      }
    ]
  },
  {
    "id": "574750e7-acba-43f6-a482-f8ba44e05bad",
    "title": "Started Leetcode 75",
    "date": "2024-01-06",
    "blocks": [
      {
        "component": "paragraph",
        "text": "solving problems on strings"
      },
      {
        "component": "bulleted_list_item",
        "text": "p1768, easy, 12:05"
      },
      {
        "component": "bulleted_list_item",
        "text": "p1071, easy, 24:12"
      },
      {
        "component": "bulleted_list_item",
        "text": "p1431, easy, 5:01"
      },
      {
        "component": "bulleted_list_item",
        "text": "p605,easy moderate, 32:48 ; good question, 3 pointer "
      },
      {
        "component": "bulleted_list_item",
        "text": "p345, easy, 7:08"
      },
      {
        "component": "bulleted_list_item",
        "text": "p151, medium , 21 + 8 minute spent will do this again couldn’t solve it."
      },
      {
        "component": "paragraph",
        "text": "Gave the div 4 contest on codeforces solved only 2 problems. Was bad but anyways you need to start somewhere."
      }
    ]
  },
  {
    "id": "b9c17e82-36c4-44bd-be7c-cac039a58163",
    "title": "Starting Learning in Public",
    "date": "2024-01-05",
    "blocks": [
      {
        "component": "paragraph",
        "text": "Fixed many bugs that were present in this blogs page and hooked it up with notion API, HENCE we’ll be having daily updates on what I am learning."
      },
      {
        "component": "paragraph",
        "text": "Had in mind to restart that leetcode grind today, but all my time went into fixing this page. Learned some stuff about how Notion API works, every page is divided into its metadata and content. Content is the parent of several blocks of different types of component i.e. paragraphs, codes, numbered item lists, bulleted item lists and so on. "
      },
      {
        "component": "paragraph",
        "text": "Retrieving the data was the easy part just create a integration on the dev page and put in the your client secret in the getting started code. The real headache was formatting the data of this page. Fortunately I found this <a href = https://youtu.be/97ARQTHyf1c?si=zJNKNztjMbsK6bMG>guy</a> , my man helped a lot, Thanks Sean. I guess that’s all I learned today.  "
      },
      {
        "component": "paragraph",
        "text": "Cheers to the new beginning."
      }
    ]
  },
  {
    "id": "853eef81-0a9c-46fa-a646-bd0805893a0a",
    "title": "How does this website work",
    "date": "2023-06-06",
    "blocks": [
      {
        "component": "paragraph",
        "text": "In January, I began drafting this article, and now, in July 2023, I realize I've been delaying its completion for quite some time. However, it's important to clarify that my procrastination wasn't centered around the article itself. Instead, it was due to the limited time I had available to address minor bugs in the Preact.js framework."
      },
      {
        "component": "paragraph",
        "text": "Speaking about the website, it operates on the Javascript library that I have developed. It functions as a single-page application with frontend hash routing, altering the URL with different hashes corresponding to various pages. When I deploy the website on a free-tier Platform as a Service (PaaS), it restricts direct access to other routes, making only the default route accessible through URL search and as I don’t have root access to these servers I had to opt for hash routing."
      },
      {
        "component": "paragraph",
        "text": "Not having an easy access to reliable servers for free meant no database and dynamic content on the website, to solve this I had to come up with some innovative solution to have a database that was convenient to update and tagged along with an API. I used google sheets for the projects and books I’ve read page. The data I maintain on the sheet is then hardcoded into the website repository using a Node.js-based automation script i wrote called gitcron. The script commits the changes in sheet on my behalf everytime I start my laptop. "
      },
      {
        "component": "paragraph",
        "text": "Google sheets wasn’t a good choice for a CMS for blogposts and learning in public updates, So I chose Notion for this and hooked it up with the same script to update the website content."
      },
      {
        "component": "paragraph",
        "text": "Flow of the Website"
      },
      {
        "component": "bulleted_list_item",
        "text": "You visit any domain pointing to this website; currently, it's https://arpitverma.vercel.app"
      },
      {
        "component": "bulleted_list_item",
        "text": "The remote server responds with an index.html and some JavaScript files that get stored in your browser's session storage."
      },
      {
        "component": "bulleted_list_item",
        "text": "Now according to the route you are on in the website corresponding content is fetched from the stored javascript files."
      },
      {
        "component": "bulleted_list_item",
        "text": "These javascript files place the stored html into the virtual-dom element in the index.html "
      },
      {
        "component": "bulleted_list_item",
        "text": "The logic and dynamic aspects of the page are implemented separately. As JavaScript stored in session storage cannot perform logic functions, it's used solely to call upon variables."
      },
      {
        "component": "bulleted_list_item",
        "text": "For the logic part, when a page is called, a corresponding logic script is injected in the index.html."
      }
    ]
  }
]