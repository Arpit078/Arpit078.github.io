[
  {
    "id": "853eef81-0a9c-46fa-a646-bd0805893a0a",
    "title": "How does this website work",
    "date": "2024-01-06",
    "blocks": [
      {
        "component": "paragraph",
        "text": "In January, I began drafting this article, and now, in July 2023, I realize I've been delaying its completion for quite some time. However, it's important to clarify that my procrastination wasn't centered around the article itself. Instead, it was due to the limited time I had available to address minor bugs in the Preact.js framework."
      },
      {
        "component": "paragraph",
        "text": "Speaking about the website, it operates on a JavaScript framework that I developed. It functions as a single-page application with frontend hash routing, altering the URL with different hashes corresponding to various pages. One might wonder why opt for hash routing. The answer is straightforward: I don't own my server. When I deploy the website on a free-tier Platform as a Service (PaaS), it restricts direct access to other routes, making only the default route accessible through URL search."
      },
      {
        "component": "paragraph",
        "text": "Let's delve into the website's flow:"
      },
      {
        "component": "bulleted_list_item",
        "text": "You visit any domain pointing to this website; currently, it's https://arpitverma.me."
      },
      {
        "component": "bulleted_list_item",
        "text": "The remote server responds with an index.html containing JavaScript files storing content in your browser's session storage."
      },
      {
        "component": "bulleted_list_item",
        "text": "Content is dynamically rendered on the page by retrieving elements from the session storage."
      },
      {
        "component": "bulleted_list_item",
        "text": "When navigating to another route, a URL check system invokes the JavaScript responsible for that page's content."
      },
      {
        "component": "bulleted_list_item",
        "text": "The logic and dynamic aspects of the page are implemented separately. As JavaScript stored in session storage cannot perform logic functions, it's used solely to call upon variables."
      },
      {
        "component": "bulleted_list_item",
        "text": "For the logic part, when a page is called, a corresponding logic script is linked in the index.html."
      },
      {
        "component": "bulleted_list_item",
        "text": "The projects page has a unique approach. Since I don't update projects constantly, maintaining a server to host an API for the project page is inefficient. Instead, I hardcode it into the repository."
      },
      {
        "component": "bulleted_list_item",
        "text": "To streamline the hardcoding process, I developed a Node.js-based automation script called gitcron. This script fetches project details from a Google Sheet that I maintain, commits the details to the repository of the website, and there you have itâ€”the website is up and running!"
      },
      {
        "component": "numbered_list_item",
        "text": "help what is going on "
      },
      {
        "component": "numbered_list_item",
        "text": "this seems to be numbering let me see how this is written in the json"
      },
      {
        "component": "code",
        "text": "let call=\"call this some piece of code!\";\nconst hi = 12;\nasync call(hi){\n\tconsole.log(\"do you remember what the issue is??\")\n}"
      }
    ]
  }
]